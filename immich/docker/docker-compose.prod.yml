#
# WARNING: To install Immich, follow our guide: https://immich.app/docs/install/docker-compose
#
# Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.

name: immich-prod

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    extends:
      file: hwaccel.transcoding.yml
      service: nvenc
    build:
      context: .
      dockerfile: ./Dockerfile.immich-server
    environment:
      - LANG=C.UTF-8
      - LC_ALL=C.UTF-8
      - PYTHONIOENCODING=UTF-8
      - IMMICH_SHARED_FACES=true
      - IMMICH_FACE_RECOGNITION_ENABLED=true
      - IMMICH_MACHINE_LEARNING_ENABLED=true
    volumes:
      - ${UPLOAD_LOCATION}/photos:/usr/src/app/upload:rw
      - /etc/localtime:/etc/localtime:ro
#      - H:/TEMP/immich:/mnt/media/temp
      - vkshare:/mnt/media/vkshare:ro
      - o-homevideo:/mnt/media/o-homevideo:ro
      - o-photos:/mnt/media/o-photos:ro
      - yd-photos:/mnt/media/yd-photos/Sorted:ro
      - google-takeout:/mnt/media/google-takeout:ro
      - o-homevideo:/mnt/media/o-homevideo:ro
    env_file:
      - .env
    ports:
      - 2283:2283
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false
      

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:pr-18272-cuda
#    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION-cuda:-release-cuda}
    extends:
       file: hwaccel.ml.yml
       service: cuda # set to one of [armnn, cuda, rocm, openvino, openvino-wsl, rknn] for accelerated inference
    ports:
      - 3003:3003
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: always
    healthcheck:
      disable: false
    environment:
    - EXECUTION_PROVIDERS=tensorrt,cuda
    - ENABLE_GPU=true
    - DEVICE=cuda
    - ORT_TENSORRT_FP16_ENABLE=1

  redis:
    container_name: immich_redis
    image: redis:6.2-alpine@sha256:148bb5411c184abd288d9aaed139c98123eeb8824c5d3fce03cf721db58066d8
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:739cdd626151ff1f796dc95a6591b55a714f341c737e27f045019ceabf8e8c52
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${UPLOAD_LOCATION}/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: always

  # set IMMICH_TELEMETRY_INCLUDE=all in .env to enable metrics
  immich-prometheus:
    container_name: immich_prometheus
    ports:
      - 9090:9090
    image: prom/prometheus@sha256:502ad90314c7485892ce696cb14a99fceab9fc27af29f4b427f41bd39701a199
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  # first login uses admin/admin
  # add data source for http://immich-prometheus:9090 to get started
  immich-grafana:
    container_name: immich_grafana
    command: [ './run.sh', '-disable-reporting' ]
    ports:
      - 3000:3000
#    image: grafana/grafana:11.5.2-ubuntu@sha256:8b5858c447e06fd7a89006b562ba7bba7c4d5813600c7982374c41852adefaeb
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  frpc:
    image: snowdreamtech/frpc
    container_name: immich_frpc
    restart: always
    depends_on:
      - immich-server
    volumes:
      - ./frpc.ini:/etc/frp/frpc.ini
    command: ["-c", "/etc/frp/frpc.ini"]


  redis-commander:
    image: rediscommander/redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"

volumes:
  model-cache:
  prometheus-data:
  grafana-data:

  vkshare:
    driver: local
    driver_opts:
      o: user=user1,password=user1,iocharset=utf8
      device: //luigi/X/vkshare
      type: cifs

  o-homevideo:
    driver: local
    driver_opts:
      o: user=user1,password=user1,iocharset=utf8
      device: //luigi/X/O-HomeVideo
      type: cifs

  o-photos:
    driver: local
    driver_opts:
      o: user=user1,password=user1,iocharset=utf8
      device: //luigi/X/O-Photos
      type: cifs

  yd-photos:
    driver: local
    driver_opts:
      o: user=user1,password=user1,iocharset=utf8
      device: //luigi/X/YD-Photos/Sorted
      type: cifs

  google-takeout:
    driver: local
    driver_opts:
      o: user=user1,password=user1,iocharset=utf8
      device: //luigi/X/takeout.google.com/2024.06.11/unpacked/Takeout.Sorted
      type: cifs
