import onnx
import onnxruntime as ort
import numpy as np
from pathlib import Path

def check_onnx_model(model_path: str):
    model_path = Path(model_path)
    if not model_path.exists():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")

    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ONNX –º–æ–¥–µ–ª–∏: {model_path}")

    # --- 1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
    try:
        model = onnx.load(model_path)
        onnx.checker.check_model(model)
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–æ—à–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É ONNX.")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–æ–¥–µ–ª–∏:", e)
        return

    # --- 2Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ö–æ–¥–∞—Ö –∏ –≤—ã—Ö–æ–¥–∞—Ö
    print("\nüì¶ –í—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏:")
    for i, inp in enumerate(model.graph.input):
        shape = []
        for dim in inp.type.tensor_type.shape.dim:
            shape.append(dim.dim_value if dim.dim_value != 0 else "dynamic")
        dtype = inp.type.tensor_type.elem_type
        print(f"  [{i}] {inp.name} | dtype={dtype} | shape={shape}")

    print("\nüì§ –í—ã—Ö–æ–¥—ã –º–æ–¥–µ–ª–∏:")
    for o, out in enumerate(model.graph.output):
        shape = []
        for dim in out.type.tensor_type.shape.dim:
            shape.append(dim.dim_value if dim.dim_value != 0 else "dynamic")
        dtype = out.type.tensor_type.elem_type
        print(f"  [{o}] {out.name} | dtype={dtype} | shape={shape}")

    # --- 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    providers = ort.get_available_providers()
    print("\n‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ backend-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:", providers)

    # --- 4Ô∏è‚É£ –ü—Ä–æ–±–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å
    try:
        sess = ort.InferenceSession(str(model_path), providers=providers)
        input_name = sess.get_inputs()[0].name
        input_shape = sess.get_inputs()[0].shape
        input_dtype = sess.get_inputs()[0].type

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        shape_fixed = [s if isinstance(s, int) and s > 0 else 640 for s in input_shape]
        dummy = np.random.rand(*shape_fixed).astype(np.float32)

        print(f"\nüöÄ –ü—Ä–æ–±–Ω—ã–π –∏–Ω—Ñ–µ—Ä–µ–Ω—Å: –≤—Ö–æ–¥ {input_name} {shape_fixed}")
        outputs = sess.run(None, {input_name: dummy})
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤: {len(outputs)}")

        for idx, out in enumerate(outputs):
            print(f"  ‚îî‚îÄ Output[{idx}]: shape={out.shape}, dtype={out.dtype}")

    except Exception as e:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–µ –º–æ–¥–µ–ª–∏:", e)

    print("\nüßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_onnx_model.py path/to/model.onnx")
    else:
        check_onnx_model(sys.argv[1])
